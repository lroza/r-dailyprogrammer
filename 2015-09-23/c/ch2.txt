char *get(char *buff, int row, int col, int width) {
    return buff + row * (width + 1) + col;
}
void get_neighbours(char *neighbours, char *current, int row, int col, int width, int height) {
    char  c;
    if(row > 0) {
        if(col > 0 && (c = *get(current, row - 1, col - 1, width)) != ' ') {
            *(neighbours++) = c;
        }
        if((c = *get(current, row - 1, col, width)) != ' ') {
            *(neighbours++) = c;
        }
        if(col < width - 1 && (c = *get(current, row - 1, col + 1, width)) != ' ') {
            *(neighbours++) = c;
        }
    }
    if(col > 0 && (c = *get(current, row, col - 1, width)) != ' ') {
        *(neighbours++) = c;
    }
    if(col < width - 1 && (c = *get(current, row, col + 1, width)) != ' ') {
        *(neighbours++) = c;
    }
    if(row < height - 1) {
        if(col > 0 && (c = *get(current, row + 1, col - 1, width)) != ' ') {
            *(neighbours++) = c;
        }
        if((c = *get(current, row + 1, col, width)) != ' ') {
            *(neighbours++) = c;
        }
        if(col < width - 1 && (c = *get(current, row + 1, col + 1, width)) != ' ') {
            *(neighbours++) = c;
        }
    }
}
char get_next(char *current, int row, int col, int width, int height) {
    char *neighbours = calloc(9, sizeof(char));
    get_neighbours(neighbours, current, row, col, width, height);

    int n = strlen(neighbours);

    char cell = *get(current, row , col, width);
    char newborn = neighbours[rand() % 3];
    free(neighbours);

    if(n < 2 || n > 3) {
        return ' ';
    } else if(n == 3 && cell == ' ') {
        return newborn;
    } else {
        return cell;
    }
}
void live(char *current, char *next, int width, int height) {
    for(int row = 0; row < height; row++) {
        for(int col = 0; col < width; col++) {
            *get(next, row, col, width) = get_next(current, row, col, width, height);
        }
    }
}